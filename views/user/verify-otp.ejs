<%- include("../partials/header") %>

<div class="breadcrumbs_area other_bread">
  <div class="container">   
      <div class="row">
          <div class="col-12">
              <div class="breadcrumb_content">
                  <ul>
                      <li><a href="/">home</a></li>
                      <li>/</li>
                      <li>Verify OTP</li>
                  </ul>
              </div>
          </div>
      </div>
  </div>         
</div>
<!--breadcrumbs area end-->


<!-- customer login start -->
<div class="customer_login">
  <div class="container">
      <div class="row">
         <!--login area start-->
          <div class="col-lg-6 col-md-6">
              <div class="account_form">
                  <h2>Verify OTP</h2>
                  <form id="otpForm" action="/otp" method="post">
                       <p>   
                          <label>Enter OTP <span>*</span></label>
                          <input type="text" name="otp">
                       </p>   
                      <div class="login_submit">
                        <span id="timer"></span> <!-- Timer display -->
                         <a href="#" id="resendOtp" >Resend OTP</a>
                          <!-- <label for="remember">
                              <input id="remember" type="checkbox">
                              Remember me
                          </label> -->
                          <button type="submit" name="newotp">Verify</button> 
                      </div>
                  </form>
               </div>    
          </div>
          <!--login area start-->
        </div>
      </div>    
  </div>

<%- include("../partials/footer") %>

<script>
    let intervalId; // Global variable to hold the interval ID

function startTimer(duration, display, action) {
    let timer = duration, minutes, seconds;
    intervalId = setInterval(function () {
        minutes = parseInt(timer / 60, 10);
        seconds = parseInt(timer % 60, 10);

        minutes = minutes < 10 ? "0" + minutes : minutes;
        seconds = seconds < 10 ? "0" + seconds : seconds;

        display.textContent = minutes + ":" + seconds;

        if (--timer < 0) {
            clearInterval(intervalId);
            display.style.display = "none"; // Hide the timer display

            // Show the Swal.fire alert for timer expiration
            if (action === 'otpVerification') {
                Swal.fire({
                    icon: 'error',
                    title: 'Timer Expired',
                    text: 'The timer has expired for OTP verification. Please try again.',
                });
            } else if (action === 'resendOTP') {
                Swal.fire({
                    icon: 'error',
                    title: 'Timer Expired',
                    text: 'The timer has expired for resending OTP. Please try again.',
                });
            }
        }
    }, 1000);

    return intervalId; // Return the interval ID for later use
}

document.addEventListener("DOMContentLoaded", function () {
    let duration = 60;
    let display = document.querySelector('#timer');
    let intervalId; // Declare intervalId outside of the event listeners

    // Function to start the timer
    function startTimerAndDisplay(duration, display) {
        display.style.display = "block"; // Show the timer display
        clearInterval(intervalId); // Clear any existing timer
        intervalId = startTimer(duration, display); // Start the timer
    }

    // Start the timer for OTP verification
    startTimerAndDisplay(duration, display);

    // Attach an event listener to the OTP verification form
    let otpForm = document.querySelector('#otpForm');
    otpForm.addEventListener('submit', function (event) {
        clearInterval(intervalId); // Stop the timer when the form is submitted
    });

    // Attach an event listener to the "Resend OTP" link
    let resendOtpLink = document.querySelector('#resendOtp');
    resendOtpLink.addEventListener('click', function (event) {
        event.preventDefault(); // Prevent the default link behavior
        // Start the timer for resend OTP
        startTimerAndDisplay(duration, display);
        // Add logic here to trigger the resend OTP functionality
        // For example, you can make an AJAX request to the server to resend OTP
    });
});

document.addEventListener("DOMContentLoaded", function () {
    // Set the duration of the timer (in seconds)
    let duration = 60;

    // Get the timer display element
    let display = document.querySelector('#timer');

    // Function to handle timer expiration
    function handleTimerExpiration() {
        clearInterval(intervalId); // Stop the timer
        isTimerExpired = true; // Set the flag to true when timer expires
        display.style.display = "none"; // Hide the timer display
        // Show an error message using Swal.fire
        Swal.fire({
            icon: 'error',
            title: 'Timer Expired',
            text: 'The timer has expired. Please try again.',
        });
    }

    // Function to start the countdown timer
    function startTimer(duration, display) {
        let timer = duration;
        let intervalId = setInterval(function () {
            if (timer <= 0) {
                clearInterval(intervalId);
                handleTimerExpiration();
            }
            timer--;
            if (timer < 0) {
                display.textContent = "00:00"; // Display 00:00 when timer expires
            } else {
                display.textContent = formatTime(timer); // Display remaining time
            }
        }, 1000);
        return intervalId; // Return the interval ID for later use
    }

    // Function to format time as MM:SS
    function formatTime(time) {
        let minutes = Math.floor(time / 60);
        let seconds = time % 60;
        return `${minutes < 10 ? "0" + minutes : minutes}:${seconds < 10 ? "0" + seconds : seconds}`;
    }

    // Start the timer for OTP verification
    let intervalId = startTimer(duration, display);

    // Attach an event listener to the OTP verification form
    let otpForm = document.querySelector('#otpForm');
    otpForm.addEventListener('submit', function (event) {
        // Check if the timer has expired
        if (isTimerExpired) {
            event.preventDefault(); // Prevent form submission
            // Show an error message using Swal.fire
            Swal.fire({
                icon: 'error',
                title: 'Timer Expired',
                text: 'The timer has expired. Please try again.',
            });
        } else {
            // Continue with OTP verification
            // Add your OTP verification logic here
        }
    });

    // Attach an event listener to the "Resend OTP" link
    let resendOtpLink = document.querySelector('#resendOtp');
    resendOtpLink.addEventListener('click', function (event) {
        clearInterval(intervalId); // Stop the timer
        isTimerExpired = false; // Reset the timer expiration flag
        display.style.display = "inline"; // Show the timer display
        intervalId = startTimer(duration, display); // Start the timer for resend OTP
        // Perform any additional actions for resending OTP (e.g., AJAX request)
        // Add your logic here
    });
});


    document.addEventListener("DOMContentLoaded", function () {
    // Attach an event listener to the "Resend OTP" link
    let resendOtpLink = document.getElementById('resendOtp');
    resendOtpLink.addEventListener('click', function(event) {
        event.preventDefault(); // Prevent the default action of the link
        
        // Trigger the resend OTP functionality using Ajax
        fetch('/resendOtp', {
            method: 'POST', // Change the method to "POST"
            headers: {
                'Content-Type': 'application/json'
            },
            credentials: 'same-origin', // Include credentials in the request
            body: JSON.stringify({}) // Empty body, as no data is required for this request
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                // Handle successful response
                console.log('OTP resent successfully');
                // Display a success message to the user using swal.fire
                Swal.fire({
                    icon: 'success',
                    title: 'OTP Resent',
                    text: 'Your new OTP has been sent successfully.'
                });
            } else {
                // Handle error response
                console.error('Failed to resend OTP:', data.message);
                // Display an error message to the user using swal.fire
                Swal.fire({
                    icon: 'error',
                    title: 'Resend OTP Failed',
                    text: data.message
                });
            }
        })
        .catch(error => {
            console.error('Error:', error);
            // Display an error message to the user using swal.fire
            Swal.fire({
                icon: 'error',
                title: 'Resend OTP Failed',
                text: 'An error occurred while resending OTP. Please try again later.'
            });
        });
    });
});


</script>

    