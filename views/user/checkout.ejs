<%- include("../partials/header") %>

    <!--breadcrumbs area start-->
    <div class="breadcrumbs_area other_bread">
        <div class="container">
            <div class="row">
                <div class="col-12">
                    <div class="breadcrumb_content">
                        <ul>
                            <li><a href="/">home</a></li>
                            <li>/</li>
                            <li>checkout</li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!--breadcrumbs area end-->

    <!--Checkout page section-->
    <div class="Checkout_section" id="accordion">
        <div class="container">
            <div class="checkout_form">
                <form action="/place-order" method="post">
                    <div class="row">
                        <div class="col-lg-6 col-md-6">
                            <h3>Select Address</h3>
                            <% for (let i=0; i < address.length; i++) { %>
                                <div class="address_item" style="margin-bottom: 10px;">
                                    <input type="radio" id="address_<%= i %>" name="selected_address"
                                        value="<%= address[i]._id %>" style="transform: scale(0.4);" <% if (i===0) { %>
                                    checked <% } %>>
                                        <label for="address_<%= i %>" style="vertical-align: middle;">
                                            <strong>
                                                <%= address[i].name %>
                                            </strong><br>
                                            <%= address[i].house %>, <%= address[i].city %>, <%= address[i].state %> -
                                                        <%= address[i].pincode %>
                                        </label>
                                </div>
                                <% } %>
                        </div>
                        <div class="col-lg-6 col-md-6">
                            <h3>Your order</h3>
                            <div class="order_table table-responsive">
                                <table>
                                    <thead>
                                        <tr>
                                            <th>Product</th>
                                            <th>Size</th>
                                            <th>Total</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <% for (let i=0; i < cartItems.length; i++) { %>
                                            <% let item=cartItems[i]; %>
                                                <tr>
                                                    <td>
                                                        <%= item.product.productName %> <strong> × <%= item.quantity %>
                                                            </strong>
                                                    </td>
                                                    <td>
                                                        <%= item.size %>
                                                    </td>
                                                    <td>₹<%= item.product.salePrice * item.quantity %>
                                                    </td>
                                                </tr>
                                                <% } %>
                                    </tbody>
                                    <tfoot>
                                        <tr class="order_total">
                                            <th>Order Total</th>
                                            <td><strong>₹<%= totalAmount %></strong></td>
                                        </tr>
                                    </tfoot>
                                </table>
                            </div>
                            <h3>Payment Method</h3>
                            <div class="payment_method">
                                <div class="panel-default">
                                    <input id="payment_cod" name="payment_method" type="radio" value="Cash on Delivery"
                                        style="margin-right: 10px;">
                                    <label for="payment_cod">Cash on Delivery</label>
                                </div>
                                <div class="panel-default">
                                    <input id="payment_razorpay" name="payment_method" type="radio" value="razorpay"
                                        style="margin-right: 10px;">
                                    <label for="payment_razorpay">Razorpay</label>
                                </div>
                                <div class="panel-default">
                                    <input id="payment_wallet" name="payment_method" type="radio" value="wallet"
                                        style="margin-right: 10px;">
                                    <label for="payment_wallet">Wallet</label>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="order_button" style="text-align: right;">
                        <button id="proceedToPaymentBtn" type="submit">Place Order</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- <div class="panel-default">
                                    <input id="payment" name="check_method" type="radio" data-bs-target="createp_account" />
                                    <label for="payment" data-bs-toggle="collapse" data-bs-target="#method" aria-controls="method">Create an account?</label>

                                    <div id="method" class="collapse one" data-bs-parent="#accordion">
                                        <div class="card-body1">
                                           <p>Please send a check to Store Name, Store Street, Store Town, Store State / County, Store Postcode.</p>
                                        </div>
                                    </div>
                                </div>  -->
    <!--Checkout page section end-->

    <%- include("../partials/footer") %>
        <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
        <script>

            $(document).ready(function () {
                var totalAmountText = $(".order_total td strong").text().replace('₹', '').trim();
                var totalAmount = parseFloat(totalAmountText);
                console.log(totalAmount);

                $('form').on('submit', function (event) {
                    event.preventDefault(); // Prevent the default form submission
                    if (totalAmount === 0) {
                    Toastify({
                        text: "Please add items to your cart before proceeding.",
                        duration: 3000,
                        gravity: "top",
                        position: "center",
                        backgroundColor: "#ff6347",
                    }).showToast();
                    return;
                }
                    var isPaymentMethodSelected = $("#payment_cod").is(":checked") || $("#payment_wallet").is(":checked") || $("#payment_razorpay").is(":checked");
                    var isCodSelected = $("#payment_cod").is(":checked");
                    var isWalletSelected = $("#payment_wallet").is(":checked");
                    var isRazorpaySelected = $("#payment_razorpay").is(":checked");

                    // Serialize the form data
                    var formData = $(this).serialize();
                    // Get the value of the selected address
                    var selectedAddress = $("input[name='selected_address']:checked").val();
                    // Check if an address is selected
                    if (!selectedAddress) {
                        Toastify({
                            text: "Please select an address",
                            duration: 3000, // Display for 3 seconds
                            close: true,
                            gravity: "top", // Position at the top of the screen
                            position: "center", // Position at the right side of the screen
                            backgroundColor: "linear-gradient(to right, #ff6c6c, #f66262)",
                        }).showToast();
                        return; // Stop further execution
                    }
                    // Check if a payment method is selected
                    if (!isPaymentMethodSelected) {
                        Toastify({
                            text: "Please select a payment method",
                            duration: 3000,
                            close: true,
                            gravity: "top",
                            position: "center",
                            backgroundColor: "linear-gradient(to right, #ff6c6c, #f66262)",
                        }).showToast();
                        return; // Stop further execution
                    }
                    // Append the selected address as a separate parameter
                    // formData += `&selected_address=${selectedAddress}`;
                    formData += "&selected_address=" + encodeURIComponent(selectedAddress);
                    console.log(formData);

                    // Send an AJAX request to the backend
                    if (isCodSelected || isWalletSelected) {
                        if (isCodSelected && totalAmount < 1000) {
                            Toastify({
                                text: "Orders below 1000 are not allowed for COD",
                                gravity: "top", // Position at the top of the screen
                                position: "center", // Centered horizontally
                                backgroundColor: "red", // Red background color
                                stopOnFocus: true, // Prevent dismissing notification on click
                            }).showToast();
                            return;
                        }
                        $.ajax({
                            type: 'POST',
                            url: '/place-order',
                            data: formData,
                            success: function (response) {
                                console.log(response);

                                if (response.error) {
                                    // Handle the error case
                                    Toastify({
                                        text: response.message,
                                        gravity: "top", // Position at the top of the screen
                                        position: "center",
                                        backgroundColor: 'red',
                                        stopOnFocus: true
                                    }).showToast();
                                } else {
                                    // Handle the success case
                                    if (response.paymentMethod === 'wallet' || response.paymentMethod === 'Cash on Delivery') {
                                        Toastify({
                                            text: 'Your order has been successfully placed!',
                                            gravity: "top", // Position at the top of the screen
                                            position: "center",
                                            backgroundColor: 'green',
                                            stopOnFocus: true,
                                            duration: 3000
                                        }).showToast();

                                        setTimeout(function () {
                                            window.location.href = '/order-success';
                                        }, 3000);
                                    } else {
                                        Toastify({
                                            text: 'Failed to place order. Please try again.',
                                            gravity: "top", // Position at the top of the screen
                                            position: "center",
                                            backgroundColor: 'red',
                                            stopOnFocus: true
                                        }).showToast();
                                    }
                                }
                            },
                            error: function (xhr, status, error) {
                                console.error('Error:', error);
                                Toastify({
                                    text: 'An error occurred while processing your request. Please try again later.',
                                    backgroundColor: 'red',
                                    stopOnFocus: true
                                }).showToast();
                            }
                        });
                    } else if (isRazorpaySelected) {
                        console.log('razorpay');
                        console.log(totalAmount);
                        fetch('/createOrder', {
                            method: "POST",
                            headers: {
                                "Content-Type": "application/json"
                            },
                            body: JSON.stringify({ totalPrice: totalAmount })
                        }).then(response => response.json())
                            .then(data => {
                                console.log(data);
                                const parseAmount = parseInt(data.totalPrice)
                                console.log(parseAmount);
                                var options = {
                                    "key": "rzp_test_XnnB8x997qkm5Z",
                                    "amount": data.orderId.amount,
                                    "currency": "INR",
                                    "name": "Reid",
                                    "description": "Test Transaction",
                                    "image": "https://example.com/your_logo",
                                    "order_id": data.orderId.id,
                                    "handler": function (response) {
                                        console.log(response);
                                        console.log("Hello")

                                        verify(response, data.orderId.id, formData)
                                        console.log("hey")
                                    },
                                    "prefill": {
                                        "name": "Gaurav Kumar",
                                        "email": "gaurav.kumar@example.com",
                                        "contact": "9000090000"
                                    },
                                    "notes": {
                                        "address": "Razorpay Corporate Office"
                                    },
                                    "theme": {
                                        "color": "#3399cc"
                                    }
                                };
                                var rzp = new Razorpay(options)
                                rzp.open();
                                rzp.on("payment.failed", function (response) {
                                    console.log('Payment failed:', response.error.description);
                                    handleFailure(response.error.description);
                                });

                                function handleFailure(description) {
                                    console.log('Payment failed:', description);

                                    // Redirect to appropriate page or handle as required
                                    createOrderWithStatusPending();
                                    window.location.href = "/user-profile"

                                }

                                function createOrderWithStatusPending() {
                                    console.log('inside createOrderWithStatusPending');
                                    fetch('/failedRazorpay', {
                                        method: 'POST',
                                        headers: {
                                            'Content-Type': 'application/x-www-form-urlencoded',
                                        },
                                        body: formData
                                    })
                                        .then(response => {
                                            if (!response.ok) {
                                                throw new Error('Failed to create order.');
                                            }
                                            return response.json();
                                        })
                                        .then(data => {
                                            console.log(data);
                                            if (data.success) {

                                                // Redirect to the appropriate page with the newly created order ID
                                                window.location.href = '/user-profile';
                                            } else {
                                                console.error('Error: Order creation failed');
                                                // Handle the error case where order creation fails
                                                // You may redirect to an error page or display a message to the user
                                            }
                                        })
                                        .catch((error) => {
                                            console.error('Error:', error);
                                            // Handle any errors that occur during the fetch operation
                                            // You may redirect to an error page or display a message to the user
                                        });
                                }

                                function verify(response, orderId, formData) {
                                    console.log('inside verify');
                                    console.log(response);
                                    console.log(orderId);
                                    console.log(formData);
                                    fetch('/paymentSuccess', {
                                        method: 'post',
                                        headers: {
                                            "Content-Type": "application/json"
                                        },
                                        body: JSON.stringify({
                                            paymentid: response.razorpay_payment_id,
                                            razorpayorderid: response.razorpay_order_id,
                                            signature: response.razorpay_signature,
                                            orderId
                                        })
                                    })
                                        .then(response => {
                                            if (response.ok) {

                                                fetch('/place-order', {
                                                    method: 'POST',
                                                    headers: {
                                                        'Content-Type': 'application/x-www-form-urlencoded',
                                                    },
                                                    body: formData
                                                })

                                                    .then(response => response.json())
                                                    .then(data => {
                                                        console.log(data);
                                                        window.location.href = '/order-success'
                                                    })
                                                    .catch((error) => {
                                                        console.error('Error:', error);
                                                    })
                                            } else {

                                                console.error('Payment failed:');

                                                alert('Payment failed. Please try again later.');
                                            }
                                        })
                                        .catch(error => {
                                            // Handle any errors that occur during the fetch operation
                                            console.error('Error:', error);
                                        });
                                }
                            })
                    }
                });
            });

            function paymentMethodRazorpayPayment(orderinfo) {
                console.log("inside ejs razorpayPayment function", orderinfo);
                console.log(orderinfo.razorpayOrderDetails.amount);
                console.log(orderinfo.razorpayOrderDetails.id);
                const options = {

                    "key": `rzp_test_XnnB8x997qkm5Z`, // Enter the Key ID generated from the Dashboard
                    "amount": orderinfo.razorpayOrderDetails.amount, // Amount is in currency subunits. Default currency is INR. Hence, 50000 refers to 50000 paise
                    "currency": "INR",
                    "name": "Reid",  //your business name
                    "description": "Test Transaction",
                    "image": "/user/assets/images/demos/demo-10/logo-main.png",
                    "order_id": `${orderinfo.razorpayOrderDetails.id}`, //This is a sample Order ID. Pass the `id` obtained in the response of Step 1
                    "handler": function (response) {
                        // alert(response.razorpay_payment_id);
                        // alert(response.razorpay_order_id);
                        // alert(response.razorpay_signature);
                        console.log('1', response.razorpay_payment_id);
                        console.log('2', response.razorpay_order_id);
                        console.log("response.razorpay_signature", response.razorpay_signature);

                        verifyPaymentSignature(response, orderinfo.orderDetails, orderinfo.razorpayOrderDetails);

                    },
                    "prefill": {
                        "name": "anushidh",
                        "email": "anushidh101@gmail.com",
                        "contact": "8075257134"
                    },
                    "notes": {
                        "address": "Razorpay Corporate Office"
                    },
                    "theme": {
                        "color": "#3399cc"
                    }
                };

                console.log("new Razorpay(options)");
                const rzp1 = new Razorpay(options);
                rzp1.open();
                rzp.on("payment.failed", function (response) {
                    console.log('Payment failed:', response.error.description);
                    handleFailure(response.error.description, orderinfo.orderDetails.address, orderinfo.orderDetails.
                        paymentMethod);
                });

                function handleFailure(description, address, paymentMethod) {
                    console.log('Payment failed:', description, address, paymentMethod);

                    // Redirect to appropriate page or handle as required
                    createOrderWithStatusPending(address, paymentMethod);
                    window.location.href = "/user-profile"

                }
                function createOrderWithStatusPending(address, paymentMethod) {
                    fetch('/place-order', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(
                            {
                                addressId: address,
                                paymentOption: paymentMethod,
                                status: "pending"
                            }
                        ),
                    })
                        .then(response => {
                            if (!response.ok) {
                                throw new Error('Failed to create order.');
                            }
                            return response.json();
                        })
                        .then(data => {
                            console.log(data);
                            if (data.success) {

                                // Redirect to the appropriate page with the newly created order ID
                                window.location.href = '/orderFailedPage';
                            } else {
                                console.error('Error: Order creation failed');
                                // Handle the error case where order creation fails
                                // You may redirect to an error page or display a message to the user
                            }
                        })
                        .catch((error) => {
                            console.error('Error:', error);
                            // Handle any errors that occur during the fetch operation
                            // You may redirect to an error page or display a message to the user
                        });
                }

            }

            function verifyPaymentSignature(payment, orderDetails, razorpayOrderDetails) {
                console.log("function verifyPaymentSignature(payment,orderDetails,razorpayOrderDetails)");
                $.ajax({
                    url: '/verify-payment',
                    method: 'post',
                    data: {
                        payment,
                        orderDetails,
                        razorpayOrderDetails
                    },

                    success: (response) => {
                        console.log(response, '22222222222222222222');
                        if (response.status) {
                            Swal.fire({
                                title: "Good job!",
                                text: "Payment successful!",
                                icon: "success",
                                confirmButtonText: "Ok!",
                            }).then(() => {
                                location.href = '/order-success';
                            });
                        } else {
                            Swal.fire({
                                title: "Sorry!",
                                text: "Payment failed",
                                icon: "error",
                                confirmButtonText: "Ok!",
                            }).then(() => {
                                location.href = '/cart';
                            });
                        }
                    }
                });
            }



        </script>