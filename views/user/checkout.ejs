<%- include("../partials/header") %>

    <!--breadcrumbs area start-->
    <div class="breadcrumbs_area other_bread">
        <div class="container">
            <div class="row">
                <div class="col-12">
                    <div class="breadcrumb_content">
                        <ul>
                            <li><a href="/">home</a></li>
                            <li>/</li>
                            <li>checkout</li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!--breadcrumbs area end-->

    <!--Checkout page section-->
    <div class="Checkout_section" id="accordion">
        <div class="container">
            <!-- <div class="row">
                <div class="col-12">
                     <div class="user-actions">
                         <h3> 
                             <i class="fa fa-file-o" aria-hidden="true"></i>
                             Returning customer?
                             <a class="Returning" href="#" data-bs-toggle="collapse" data-bs-target="#checkout_login" aria-expanded="true">Click here to login</a>     
 
                         </h3>
                          <div id="checkout_login" class="collapse" data-bs-parent="#accordion">
                             <div class="checkout_info">
                                 <p>If you have shopped with us before, please enter your details in the boxes below. If you are a new customer please proceed to the Billing & Shipping section.</p>  
                                 <form action="#">  
                                     <div class="form_group">
                                         <label>Username or email <span>*</span></label>
                                         <input type="text">     
                                     </div>
                                     <div class="form_group">
                                         <label>Password  <span>*</span></label>
                                         <input type="text">     
                                     </div> 
                                     <div class="form_group group_3 ">
                                         <button type="submit">Login</button>
                                         <label for="remember_box">
                                             <input id="remember_box" type="checkbox">
                                             <span> Remember me </span>
                                         </label>     
                                     </div>
                                     <a href="#">Lost your password?</a>
                                 </form>          
                             </div>
                         </div>    
                     </div>
                     <div class="user-actions">
                         <h3> 
                             <i class="fa fa-file-o" aria-hidden="true"></i>
                             Returning customer?
                             <a class="Returning" href="#" data-bs-toggle="collapse" data-bs-target="#checkout_coupon" aria-expanded="true">Click here to enter your code</a>     
 
                         </h3>
                          <div id="checkout_coupon" class="collapse" data-bs-parent="#accordion">
                             <div class="checkout_info">
                                 <form action="/applyCoupon" method="post">
                                     <input id="coupon_code" name="couponCode" placeholder="Coupon code" type="text">
                                     <button id="apply_coupon_button" type="submit">Apply coupon</button>
                                 </form>
                             </div>
                         </div>  
                         <button id="remove_coupon_button" type="button" style="background-color: lightcoral; color: black; margin-left: 60px; border: none;">Remove coupon</button>  
                     </div>    
                </div>
             </div> -->
            <div class="checkout_form">
                <form action="/place-order" method="post">
                    <div class="row">
                        <div class="col-lg-6 col-md-6">
                            <h3>Select Address</h3>
                            <% for (let i=0; i < address.length; i++) { %>
                                <div class="address_item" style="margin-bottom: 10px;">
                                    <input type="radio" id="address_<%= i %>" name="selected_address"
                                        value="<%= address[i]._id %>" style="transform: scale(0.4);" <% if (i===0) { %>
                                    checked <% } %>>
                                        <label for="address_<%= i %>" style="vertical-align: middle;">
                                            <strong>
                                                <%= address[i].name %>
                                            </strong><br>
                                            <%= address[i].house %>, <%= address[i].city %>, <%= address[i].state %> -
                                                        <%= address[i].pincode %>
                                        </label>
                                </div>
                                <% } %>
                        </div>
                        <div class="col-lg-6 col-md-6">
                            <h3>Your order</h3>
                            <div class="order_table table-responsive">
                                <table>
                                    <thead>
                                        <tr>
                                            <th>Product</th>
                                            <th>Size</th>
                                            <th>Total</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <% for (let i=0; i < cartItems.length; i++) { %>
                                            <% let item=cartItems[i]; %>
                                                <tr>
                                                    <td>
                                                        <%= item.product.productName %> <strong> × <%= item.quantity %>
                                                            </strong>
                                                    </td>
                                                    <td>
                                                        <%= item.size %>
                                                    </td>
                                                    <td>₹<%= item.product.salePrice * item.quantity %>
                                                    </td>
                                                </tr>
                                                <% } %>
                                    </tbody>
                                    <tfoot>
                                        <!-- <tr>
                                            <th>Cart Subtotal</th>
                                            <td></td>
                                        </tr> -->
                                        <tr class="order_total">
                                            <th>Order Total</th>
                                            <td><strong>₹<%= totalAmount %></strong></td>
                                        </tr>
                                    </tfoot>
                                </table>
                            </div>
                            <h3>Payment Method</h3>
                            <div class="payment_method">
                                <!-- <div class="panel-default">
                                    <input id="payment_defult" name="payment_method" type="radio" value="PayPal" style="margin-right: 10px;">
                                    <label for="payment_defult">PayPal <img src="assets/img/icon/papyel.png" alt=""></label>
                                </div> -->
                                <div class="panel-default">
                                    <input id="payment_cod" name="payment_method" type="radio" value="Cash on Delivery"
                                        style="margin-right: 10px;">
                                    <label for="payment_cod">Cash on Delivery</label>
                                </div>
                                <div class="panel-default">
                                    <input id="payment_razorpay" name="payment_method" type="radio" value="razorpay"
                                        style="margin-right: 10px;">
                                    <label for="payment_razorpay">Razorpay</label>
                                </div>
                                <div class="panel-default">
                                    <input id="payment_wallet" name="payment_method" type="radio" value="wallet"
                                        style="margin-right: 10px;">
                                    <label for="payment_wallet">Wallet</label>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="order_button" style="text-align: right;">
                        <button id="proceedToPaymentBtn" type="submit">Place Order</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- <div class="panel-default">
                                    <input id="payment" name="check_method" type="radio" data-bs-target="createp_account" />
                                    <label for="payment" data-bs-toggle="collapse" data-bs-target="#method" aria-controls="method">Create an account?</label>

                                    <div id="method" class="collapse one" data-bs-parent="#accordion">
                                        <div class="card-body1">
                                           <p>Please send a check to Store Name, Store Street, Store Town, Store State / County, Store Postcode.</p>
                                        </div>
                                    </div>
                                </div>  -->
    <!--Checkout page section end-->

    <%- include("../partials/footer") %>
        <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
        <script>



            // $(document).ready(function () {
            //     $('form').on('submit', function (event) {
            //         event.preventDefault(); // Prevent the default form submission
            //         var isCodSelected = $("#payment_cod").is(":checked");
            //         var isWalletSelected = $("#payment_wallet").is(":checked");
            //         var isRazorpaySelected = $("#payment_razorpay").is(":checked");
            //         // Serialize the form data
            //         var formData = $(this).serialize();
            //         // Get the value of the selected address
            //         var selectedAddress = $("input[name='selected_address']:checked").val();

            //         // Append the selected address to the formData
            //         formData += "&selected_address=" + selectedAddress;
            //         console.log(formData);
            //         // Send an AJAX request to the backend
            //        if(isCodSelected || isWalletSelected) {
            //         $.ajax({
            //             type: 'POST',
            //             url: '/place-order',
            //             data: formData,
            //        } 
            //             success: function (response) {
            //                 // Handle success response from the server
            //                 console.log(response.totalAmount); // Log the response for debugging
            //                 console.log(response.paymentMethod);
            //                 // Check if payment method is Cash on Delivery and total amount is greater than 1000
            //                 if (response.paymentMethod === 'Cash on Delivery' && response.totalAmount > 1000) {
            //                     // Show error message
            //                     Swal.fire({
            //                         icon: 'error',
            //                         title: 'Error',
            //                         text: 'Orders with Cash on Delivery are only allowed for total amount greater than 1000',
            //                         confirmButtonColor: '#d33',
            //                         confirmButtonText: 'OK'
            //                     });
            //                 } else {
            //                     // Show SweetAlert2 confirmation message
            //                     Swal.fire({
            //                         icon: 'success',
            //                         title: 'Order Placed',
            //                         text: 'Your order has been placed successfully!',
            //                         confirmButtonColor: '#3085d6',
            //                         confirmButtonText: 'OK'
            //                     }).then((result) => {
            //                         if (result.isConfirmed) {
            //                             if (response.paymentMethod === 'razorpay') {
            //                                 // If payment method is Razorpay, proceed with Razorpay payment
            //                                 paymentMethodRazorpayPayment(response);
            //                             } else {
            //                                 // Otherwise, redirect to the homepage
            //                                 window.location.href = '/order-success';
            //                             }
            //                         }
            //                     });
            //                 }
            //             },
            //             error: function (xhr, status, error) {
            //                 // Handle error response from the server
            //                 console.error(error); // Log the error for debugging
            //                 var errorMessage = xhr.responseJSON ? xhr.responseJSON.message : 'An error occurred while placing the order. Please try again later.';
            //                 console.log(errorMessage);
            //                 // Show an error message to the user using SweetAlert2
            //                 Swal.fire({
            //                     icon: 'error',
            //                     title: 'Error',
            //                     text: errorMessage,
            //                     confirmButtonColor: '#d33',
            //                     confirmButtonText: 'OK'
            //                 });
            //             }
            //         });
            //     });
            // });


            $(document).ready(function () {
                var totalAmountText = $(".order_total td strong").text().replace('₹', '').trim();
                var totalAmount = parseFloat(totalAmountText);
                console.log(totalAmount);

                $('form').on('submit', function (event) {
                    event.preventDefault(); // Prevent the default form submission

                    var isCodSelected = $("#payment_cod").is(":checked");
                    var isWalletSelected = $("#payment_wallet").is(":checked");
                    var isRazorpaySelected = $("#payment_razorpay").is(":checked");

                    // Serialize the form data
                    var formData = $(this).serialize();
                    // Get the value of the selected address
                    var selectedAddress = $("input[name='selected_address']:checked").val();

                    // Append the selected address as a separate parameter
                    formData += `&selected_address=${selectedAddress}`;
                    console.log(formData);

                    // Send an AJAX request to the backend
                    if (isCodSelected || isWalletSelected) {
                        $.ajax({
                            type: 'POST',
                            url: '/place-order',
                            data: formData,
                            success: function (response) {
                                // Handle success response from the server
                                console.log(response);

                                // Check if the order was successfully placed
                                if (response.paymentMethod === 'wallet' || response.paymentMethod === 'Cash on Delivery') {
                                    // Show a success message using SweetAlert2
                                    Swal.fire({
                                        icon: 'success',
                                        title: 'Order Placed',
                                        text: 'Your order has been successfully placed!',
                                        confirmButtonColor: '#3085d6',
                                        confirmButtonText: 'OK'
                                    }).then((result) => {
                                        if (result.isConfirmed) {
                                            // Redirect to the order success page
                                            window.location.href = '/order-success';
                                        }
                                    });
                                } else {
                                    // Show an error message
                                    console.error('Error placing order:', response);
                                    alert('Failed to place order. Please try again.');
                                }
                            },
                            error: function (xhr, status, error) {
                                // Handle error response from the server
                                console.error('Error:', error);
                                alert('An error occurred while processing your request. Please try again later.');
                            }
                        });
                    } else if (isRazorpaySelected) {
                        console.log('razorpay');
                        fetch('/createorder', {
                            method: "POST",
                            headers: {
                                "Content-Type": "application/json"
                            },
                            body: JSON.stringify({ totalPrice: totalAmount })
                        }).then(response => response.json())
                            .then(data => {
                                console.log(data);
                                const parseAmount = parseInt(data.totalPrice)
                                console.log(parseAmount);
                                var options = {
                                    "key": "rzp_test_XnnB8x997qkm5Z",
                                    "amount": data.orderId.amount,
                                    "currency": "INR",
                                    "name": "Reid",
                                    "description": "Test Transaction",
                                    "image": "https://example.com/your_logo",
                                    "order_id": data.orderId.id,
                                    "handler": function (response) {
                                        console.log(response);
                                        console.log("Hello")

                                        verify(response, data.orderId.id, formData)
                                        console.log("hey")
                                    },
                                    "prefill": {
                                        "name": "Gaurav Kumar",
                                        "email": "gaurav.kumar@example.com",
                                        "contact": "9000090000"
                                    },
                                    "notes": {
                                        "address": "Razorpay Corporate Office"
                                    },
                                    "theme": {
                                        "color": "#3399cc"
                                    }
                                };
                                var rzp = new Razorpay(options)
                                rzp.open();
                                rzp.on("payment.failed", function (response) {
                                    console.log('Payment failed:', response.error.description);
                                    handleFailure(response.error.description);
                                });

                                function handleFailure(description) {
                                    console.log('Payment failed:', description);

                                    // Redirect to appropriate page or handle as required
                                    createOrderWithStatusPending();
                                    window.location.href = "/user-profile"

                                }

                                function createOrderWithStatusPending() {
                                    console.log('inside createOrderWithStatusPending');
                                    fetch('/failedRazorpay', {
                                        method: 'POST',
                                        headers: {
                                            'Content-Type': 'application/x-www-form-urlencoded',
                                        },
                                        body: formData
                                    })
                                        .then(response => {
                                            if (!response.ok) {
                                                throw new Error('Failed to create order.');
                                            }
                                            return response.json();
                                        })
                                        .then(data => {
                                            console.log(data);
                                            if (data.success) {

                                                // Redirect to the appropriate page with the newly created order ID
                                                window.location.href = '/user-profile';
                                            } else {
                                                console.error('Error: Order creation failed');
                                                // Handle the error case where order creation fails
                                                // You may redirect to an error page or display a message to the user
                                            }
                                        })
                                        .catch((error) => {
                                            console.error('Error:', error);
                                            // Handle any errors that occur during the fetch operation
                                            // You may redirect to an error page or display a message to the user
                                        });
                                }

                                function verify(response, orderId, formData) {
                                    console.log('inside verify');
                                    console.log(response);
                                    console.log(orderId);
                                    console.log(formData);
                                    fetch('/paymentSuccess', {
                                        method: 'post',
                                        headers: {
                                            "Content-Type": "application/json"
                                        },
                                        body: JSON.stringify({
                                            paymentid: response.razorpay_payment_id,
                                            razorpayorderid: response.razorpay_order_id,
                                            signature: response.razorpay_signature,
                                            orderId
                                        })
                                    })
                                        .then(response => {
                                            if (response.ok) {

                                                fetch('/place-order', {
                                                    method: 'POST',
                                                    headers: {
                                                        'Content-Type': 'application/x-www-form-urlencoded',
                                                    },
                                                    body: formData
                                                })

                                                    .then(response => response.json())
                                                    .then(data => {
                                                        console.log(data);
                                                        window.location.href = '/order-success'
                                                    })
                                                    .catch((error) => {
                                                        console.error('Error:', error);
                                                    })
                                            } else {

                                                console.error('Payment failed:');

                                                alert('Payment failed. Please try again later.');
                                            }
                                        })
                                        .catch(error => {
                                            // Handle any errors that occur during the fetch operation
                                            console.error('Error:', error);
                                        });
                                }
                            })
                    }
                });
            });






            function paymentMethodRazorpayPayment(orderinfo) {
                console.log("inside ejs razorpayPayment function", orderinfo);
                console.log(orderinfo.razorpayOrderDetails.amount);
                console.log(orderinfo.razorpayOrderDetails.id);
                const options = {

                    "key": `rzp_test_XnnB8x997qkm5Z`, // Enter the Key ID generated from the Dashboard
                    "amount": orderinfo.razorpayOrderDetails.amount, // Amount is in currency subunits. Default currency is INR. Hence, 50000 refers to 50000 paise
                    "currency": "INR",
                    "name": "Reid",  //your business name
                    "description": "Test Transaction",
                    "image": "/user/assets/images/demos/demo-10/logo-main.png",
                    "order_id": `${orderinfo.razorpayOrderDetails.id}`, //This is a sample Order ID. Pass the `id` obtained in the response of Step 1
                    "handler": function (response) {
                        // alert(response.razorpay_payment_id);
                        // alert(response.razorpay_order_id);
                        // alert(response.razorpay_signature);
                        console.log('1', response.razorpay_payment_id);
                        console.log('2', response.razorpay_order_id);
                        console.log("response.razorpay_signature", response.razorpay_signature);

                        verifyPaymentSignature(response, orderinfo.orderDetails, orderinfo.razorpayOrderDetails);

                    },
                    "prefill": {
                        "name": "anushidh",
                        "email": "anushidh101@gmail.com",
                        "contact": "8075257134"
                    },
                    "notes": {
                        "address": "Razorpay Corporate Office"
                    },
                    "theme": {
                        "color": "#3399cc"
                    }
                };

                console.log("new Razorpay(options)");
                const rzp1 = new Razorpay(options);
                rzp1.open();
                rzp.on("payment.failed", function (response) {
                    console.log('Payment failed:', response.error.description);
                    handleFailure(response.error.description, orderinfo.orderDetails.address, orderinfo.orderDetails.
                        paymentMethod);
                });

                function handleFailure(description, address, paymentMethod) {
                    console.log('Payment failed:', description, address, paymentMethod);

                    // Redirect to appropriate page or handle as required
                    createOrderWithStatusPending(address, paymentMethod);
                    window.location.href = "/user-profile"

                }
                function createOrderWithStatusPending(address, paymentMethod) {
                    fetch('/place-order', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(
                            {
                                addressId: address,
                                paymentOption: paymentMethod,
                                status: "pending"
                            }
                        ),
                    })
                        .then(response => {
                            if (!response.ok) {
                                throw new Error('Failed to create order.');
                            }
                            return response.json();
                        })
                        .then(data => {
                            console.log(data);
                            if (data.success) {

                                // Redirect to the appropriate page with the newly created order ID
                                window.location.href = '/orderFailedPage';
                            } else {
                                console.error('Error: Order creation failed');
                                // Handle the error case where order creation fails
                                // You may redirect to an error page or display a message to the user
                            }
                        })
                        .catch((error) => {
                            console.error('Error:', error);
                            // Handle any errors that occur during the fetch operation
                            // You may redirect to an error page or display a message to the user
                        });
                }

            }

            function verifyPaymentSignature(payment, orderDetails, razorpayOrderDetails) {
                console.log("function verifyPaymentSignature(payment,orderDetails,razorpayOrderDetails)");
                $.ajax({
                    url: '/verify-payment',
                    method: 'post',
                    data: {
                        payment,
                        orderDetails,
                        razorpayOrderDetails
                    },

                    success: (response) => {
                        console.log(response, '22222222222222222222');
                        if (response.status) {
                            Swal.fire({
                                title: "Good job!",
                                text: "Payment successful!",
                                icon: "success",
                                confirmButtonText: "Ok!",
                            }).then(() => {
                                location.href = '/order-success';
                            });
                        } else {
                            Swal.fire({
                                title: "Sorry!",
                                text: "Payment failed",
                                icon: "error",
                                confirmButtonText: "Ok!",
                            }).then(() => {
                                location.href = '/cart';
                            });
                        }
                    }
                });
            }



            document.getElementById('apply_coupon_button').addEventListener('click', function (event) {

                event.preventDefault(); // Prevent default form submission behavior
                console.log('1');
                var couponCode = document.getElementById('coupon_code').value; // Get the entered coupon code

                // Send AJAX request to apply the coupon
                $.ajax({
                    url: "/applyCoupon",
                    type: 'POST',
                    data: { couponCode: couponCode },
                    success: function (response) {
                        if (response.success) {
                            // Update the order total displayed on the page
                            var orderTotalElement = document.querySelector('.order_total td');
                            if (orderTotalElement) {
                                orderTotalElement.innerHTML = '<strong>₹' + response.cart.totalPrice + '</strong>';
                            }
                            // Display a success message to the user
                            Swal.fire({
                                icon: 'success',
                                title: 'Coupon Applied!',
                                text: 'Discount applied successfully.'
                            })

                        } else {
                            // Display an error message if the coupon code is invalid or coupon is expired
                            Swal.fire({
                                icon: 'error',
                                title: 'Coupon Error',
                                text: response.message // Display the message received from the server
                            });
                        }
                    },
                    error: function (xhr, status, error) {
                        // Handle AJAX errors
                        console.error(xhr.responseText);
                        var response = JSON.parse(xhr.responseText);
                        Swal.fire({
                            icon: 'error',
                            title: 'Server Error',
                            text: response.message
                        });
                    }
                });
            });


            // Add event listener to the remove coupon button
            document.getElementById('remove_coupon_button').addEventListener('click', function (event) {
                event.preventDefault(); // Prevent default button behavior

                // Send AJAX request to remove the coupon
                $.ajax({
                    url: "/removeCoupon",
                    type: 'POST',
                    success: function (response) {
                        if (response.success) {
                            // Update the order total displayed on the page
                            var orderTotalElement = document.querySelector('.order_total td strong');
                            if (orderTotalElement) {
                                orderTotalElement.innerText = '₹' + response.cart.totalPrice;
                            }

                            // Display a success message to the user
                            Swal.fire({
                                icon: 'success',
                                title: 'Coupon Removed!',
                                text: 'Coupon removed successfully.'
                            });
                        } else {
                            // Display an error message if the coupon removal was unsuccessful
                            Swal.fire({
                                icon: 'error',
                                title: 'Coupon Removal Error',
                                text: response.message // Display the message received from the server
                            });
                        }
                    },
                    error: function (xhr, status, error) {
                        // Handle AJAX errors
                        console.error(xhr.responseText);
                        // Display an error message
                        Swal.fire({
                            icon: 'error',
                            title: 'Server Error',
                            text: 'An error occurred while processing your request. Please try again later.'
                        });
                    }
                });
            });





        </script>